/**
 * Developer Agent
 * Specializes in coding, implementation, and technical features
 */

const BaseAgent = require('./base-agent');

class DeveloperAgent extends BaseAgent {
    constructor() {
        super(
            'Developer',
            'Full-Stack Developer',
            ['development', 'coding', 'javascript', 'html', 'css', 'implementation', 'features']
        );
    }

    async execute(subtask) {
        await this.speak(`Implementing: ${subtask.description}`);

        try {
            // Check current implementation
            const currentCode = await this.analyzeCurrentCode();
            
            // Implement improvements
            const improvements = await this.implementFeatures();
            
            // Create development log
            const devLog = this.createDevelopmentLog(improvements);
            await this.writeFile('docs/development-log.md', devLog);

            await this.speak('Development tasks completed! I\'ve implemented new features and optimizations.');

            return {
                success: true,
                improvements: improvements,
                document: 'docs/development-log.md'
            };
        } catch (error) {
            await this.speak(`Development encountered an issue: ${error.message}`);
            throw error;
        }
    }

    async analyzeCurrentCode() {
        try {
            const html = await this.readFile('index.html');
            
            return {
                structure: 'single-page',
                scripts: html.includes('<script>') ? 'inline' : 'external',
                styles: html.includes('<style>') ? 'inline' : 'external',
                features: {
                    navigation: html.includes('nav-toggle'),
                    modal: html.includes('modal'),
                    animations: html.includes('@keyframes'),
                    responsive: html.includes('@media')
                }
            };
        } catch (error) {
            return {
                structure: 'unknown',
                scripts: 'unknown',
                styles: 'unknown',
                features: {}
            };
        }
    }

    async implementFeatures() {
        const improvements = [];

        // Create modular JavaScript file
        const jsModule = this.createJavaScriptModule();
        await this.writeFile('js/main.js', jsModule);
        improvements.push('Created modular JavaScript structure');

        // Create component system
        const headerComponent = this.createHeaderComponent();
        await this.writeFile('js/components/header.js', headerComponent);
        improvements.push('Created reusable header component');

        const footerComponent = this.createFooterComponent();
        await this.writeFile('js/components/footer.js', footerComponent);
        improvements.push('Created reusable footer component');

        // Create utility functions
        const utils = this.createUtilities();
        await this.writeFile('js/utils.js', utils);
        improvements.push('Created utility functions');

        return improvements;
    }

    createJavaScriptModule() {
        return `/**
 * DEPLOYHELP LLC - Main JavaScript Module
 * Generated by Developer Agent
 */

import { initHeader } from './components/header.js';
import { initFooter } from './components/footer.js';
import { initAnimations, initModals } from './utils.js';

class DeployHelpApp {
    constructor() {
        this.components = {};
        this.isInitialized = false;
    }

    init() {
        if (this.isInitialized) return;
        
        // Initialize components
        this.components.header = initHeader();
        this.components.footer = initFooter();
        
        // Initialize utilities
        initAnimations();
        initModals();
        
        // Initialize app-specific features
        this.initFeatures();
        
        this.isInitialized = true;
        console.log('DeployHelp App initialized');
    }

    initFeatures() {
        // Add app-specific initialization here
        this.setupEventListeners();
        this.updateCopyrightYear();
    }

    setupEventListeners() {
        // Smooth scrolling
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                const href = this.getAttribute('href');
                if (href === '#') return;
                
                e.preventDefault();
                const target = document.querySelector(href);
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });
    }

    updateCopyrightYear() {
        const yearElements = document.querySelectorAll('[data-year]');
        const currentYear = new Date().getFullYear();
        yearElements.forEach(el => {
            el.textContent = currentYear;
        });
    }
}

// Initialize app when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        const app = new DeployHelpApp();
        app.init();
    });
} else {
    const app = new DeployHelpApp();
    app.init();
}

export default DeployHelpApp;
`;
    }

    createHeaderComponent() {
        return `/**
 * Header Component
 * Generated by Developer Agent
 */

export function initHeader() {
    const navToggle = document.getElementById('navToggle');
    const navLinks = document.querySelector('.nav-links');

    if (!navToggle || !navLinks) return null;

    // Toggle mobile navigation
    navToggle.addEventListener('click', () => {
        navLinks.classList.toggle('active');
        const isExpanded = navLinks.classList.contains('active');
        navToggle.setAttribute('aria-expanded', isExpanded);
    });

    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
        if (!navToggle.contains(e.target) && !navLinks.contains(e.target)) {
            navLinks.classList.remove('active');
            navToggle.setAttribute('aria-expanded', 'false');
        }
    });

    // Close menu when clicking a link
    navLinks.querySelectorAll('a').forEach(link => {
        link.addEventListener('click', () => {
            navLinks.classList.remove('active');
            navToggle.setAttribute('aria-expanded', 'false');
        });
    });

    return {
        toggle: () => navLinks.classList.toggle('active'),
        close: () => {
            navLinks.classList.remove('active');
            navToggle.setAttribute('aria-expanded', 'false');
        }
    };
}
`;
    }

    createFooterComponent() {
        return `/**
 * Footer Component
 * Generated by Developer Agent
 */

export function initFooter() {
    const updateCopyright = () => {
        const yearElements = document.querySelectorAll('[data-year]');
        const currentYear = new Date().getFullYear();
        yearElements.forEach(el => {
            el.textContent = currentYear;
        });
    };

    updateCopyright();

    return {
        updateCopyright
    };
}
`;
    }

    createUtilities() {
        return `/**
 * Utility Functions
 * Generated by Developer Agent
 */

export function initAnimations() {
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate');
                observer.unobserve(entry.target);
            }
        });
    }, observerOptions);

    // Observe elements for animation
    document.querySelectorAll('.service-card, .contact-card').forEach(card => {
        observer.observe(card);
    });
}

export function initModals() {
    const modalTriggers = document.querySelectorAll('[data-modal]');
    const modals = document.querySelectorAll('.modal');

    modalTriggers.forEach(trigger => {
        trigger.addEventListener('click', (e) => {
            e.preventDefault();
            const modalId = trigger.getAttribute('data-modal');
            const modal = document.getElementById(modalId);
            
            if (modal) {
                openModal(modal);
            }
        });
    });

    modals.forEach(modal => {
        const closeBtn = modal.querySelector('.close-modal');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => closeModal(modal));
        }

        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal(modal);
            }
        });
    });

    // Close on Escape key
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            modals.forEach(modal => {
                if (modal.style.display === 'flex') {
                    closeModal(modal);
                }
            });
        }
    });
}

function openModal(modal) {
    modal.style.display = 'flex';
    setTimeout(() => {
        modal.style.opacity = '1';
        modal.querySelector('.modal-content').style.transform = 'translateY(0)';
    }, 10);
    document.body.style.overflow = 'hidden';
}

function closeModal(modal) {
    modal.style.opacity = '0';
    modal.querySelector('.modal-content').style.transform = 'translateY(-20px)';
    setTimeout(() => {
        modal.style.display = 'none';
        document.body.style.overflow = '';
    }, 300);
}

export function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

export function throttle(func, limit) {
    let inThrottle;
    return function(...args) {
        if (!inThrottle) {
            func.apply(this, args);
            inThrottle = true;
            setTimeout(() => inThrottle = false, limit);
        }
    };
}
`;
    }

    createDevelopmentLog() {
        return `# Development Log - DEPLOYHELP LLC
Generated by Developer Agent

## Implemented Features

### Modular JavaScript Structure
- Created main.js with app initialization
- Implemented component-based architecture
- Added utility functions for common tasks

### Components Created
- Header component (js/components/header.js)
- Footer component (js/components/footer.js)

### Utilities
- Animation observer system
- Modal management
- Debounce and throttle functions
- Smooth scrolling

## Code Quality Improvements
- Modular code structure
- ES6+ features
- Component reusability
- Better separation of concerns

## Next Steps
- Add unit tests
- Implement build system
- Add error handling
- Performance optimization
`;
    }
}

module.exports = DeveloperAgent;
