/**
 * Architect Agent
 * Specializes in website architecture, structure, and planning
 */

const BaseAgent = require('./base-agent');

class ArchitectAgent extends BaseAgent {
    constructor() {
        super(
            'Architect',
            'Software Architect',
            ['architecture', 'planning', 'structure', 'system-design', 'technical-specification']
        );
    }

    async execute(subtask) {
        await this.speak(`Planning the architecture for: ${subtask.description}`);

        try {
            // Analyze current website structure
            const currentStructure = await this.analyzeCurrentStructure();
            
            // Propose improvements
            const recommendations = await this.proposeArchitecture();
            
            // Create architecture document
            const architectureDoc = this.createArchitectureDocument(recommendations);
            await this.writeFile('docs/architecture.md', architectureDoc);

            await this.speak('Architecture plan completed! I\'ve created a comprehensive structure document.');

            return {
                success: true,
                structure: currentStructure,
                recommendations: recommendations,
                document: 'docs/architecture.md'
            };
        } catch (error) {
            await this.speak(`Architecture planning encountered an issue: ${error.message}`);
            throw error;
        }
    }

    async analyzeCurrentStructure() {
        const structure = {
            pages: [],
            components: [],
            assets: []
        };

        try {
            const rootFiles = await this.listDirectory('.');
            for (const item of rootFiles) {
                if (item.type === 'file' && item.name.endsWith('.html')) {
                    structure.pages.push(item.name);
                    
                    const content = await this.readFile(item.name);
                    // Extract component references
                    const scriptMatches = content.match(/<script[^>]*src=["']([^"']+)["']/g) || [];
                    const styleMatches = content.match(/<link[^>]*href=["']([^"']+)["']/g) || [];
                    
                    structure.components.push(...scriptMatches.map(m => m.match(/src=["']([^"']+)["']/)?.[1]));
                    structure.components.push(...styleMatches.map(m => m.match(/href=["']([^"']+)["']/)?.[1]));
                }
            }
        } catch (error) {
            console.error('Error analyzing structure:', error);
        }

        return structure;
    }

    async proposeArchitecture() {
        return {
            structure: {
                root: '/',
                pages: ['index.html', 'about.html', 'services.html', 'contact.html'],
                assets: ['css/', 'js/', 'images/'],
                components: ['components/header.js', 'components/footer.js']
            },
            recommendations: [
                'Modular component structure for reusability',
                'Separation of concerns (HTML, CSS, JS)',
                'Performance optimization with lazy loading',
                'Responsive design architecture',
                'SEO-friendly URL structure'
            ],
            improvements: [
                'Add component-based architecture',
                'Implement build system for optimization',
                'Add routing for SPA capabilities',
                'Structure assets efficiently'
            ]
        };
    }

    createArchitectureDocument(recommendations) {
        return `# DEPLOYHELP LLC Website Architecture

## Overview
This document outlines the architecture and structure for the DEPLOYHELP LLC website.

## Current Structure
- Root: Single-page application (index.html)
- Assets: Inline styles and scripts
- Components: Monolithic structure

## Proposed Architecture

### Structure
\`\`\`
/
??? index.html
??? about.html
??? services.html
??? contact.html
??? css/
?   ??? main.css
?   ??? components.css
??? js/
?   ??? main.js
?   ??? components/
?       ??? header.js
?       ??? footer.js
??? images/
??? docs/
    ??? architecture.md
\`\`\`

### Recommendations
${recommendations.recommendations.map(r => `- ${r}`).join('\n')}

### Key Improvements
${recommendations.improvements.map(i => `- ${i}`).join('\n')}

## Next Steps
1. Implement modular component structure
2. Optimize asset loading
3. Add progressive enhancement
4. Implement responsive design patterns

Generated by Architect Agent
`;
    }
}

module.exports = ArchitectAgent;
